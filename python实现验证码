第一种：使用random.sample()方法
# -*- coding: utf-8 -*-
import random #导入random模块
def generate_verification_code(len=6):
    ''' 随机生成6位的验证码 '''
    # 注意： 这里我们生成的是0-9A-Za-z的列表，当然你也可以指定这个list，这里很灵活
    code_list = [] 
    for i in range(10): 
        code_list.append(str(i)) #将0~9转化成字符型存入code_list[]中
    for i in range(65, 91): # 对应从“A”到“Z”的ASCII码
        code_list.append(chr(i))
    for i in range(97, 123): #对应从“a”到“z”的ASCII码
        code_list.append(chr(i))
    myslice = random.sample(code_list, len)  # 从list中随机获取6个元素，作为一个片断返回
    verification_code = ''.join(myslice) # list to string
    return verification_code
    
  random.sample讲解：
  random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列
  list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  slice = random.sample(list, 5)  # 从list中随机获取5个元素，作为一个片断返回
  print slice #输出随机5个数字
  print list  # 原有序列并没有改变
    
  join()方法讲解：
  str.join(sequence)，返回通过指定字符连接序列中元素后生成的新字符串
  seq=['a','b','c']
  '-'.join(seq) #运行方法
  返回 a-b-c
    
    
    
  第二种：使用random.randiont()方法  
  # -*- coding: utf-8 -*-
  import random
  def generate_verification_code_v2():
    ''' 随机生成6位的验证码 '''
      code_list = []
      for i in range(2):
          random_num = random.randint(0, 9) # 随机生成0-9的数字
          # 利用random.randint()函数生成一个随机整数a，使得65<=a<=90
          a = random.randint(65, 90)# 对应从“A”到“Z”的ASCII码
          b = random.randint(97, 122)# 对应从“a”到“z”的ASCII码
          random_uppercase_letter = chr(a)
          random_lowercase_letter = chr(b)
          code_list.append(str(random_num))
          code_list.append(random_uppercase_letter)
          code_list.append(random_lowercase_letter)
      verification_code = ''.join(code_list)
      return verification_code
     
  random.randint()讲解：
  random.randint(a, b)，用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，生成的随机数n: a <= n <= b
  print random.randint(12, 20)  # 生成的随机数 n: 12 <= n <= 20
  print random.randint(20, 20)  # 结果永远是20 
  print random.randint(20, 10)  # 该语句是错误的。下限必须小于上限
  第一种方法，更加灵活，可以随意设置验证码长度。 第二种方法只能设置三的倍数的验证码 
    
    
    
    
